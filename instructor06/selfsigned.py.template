#!/usr/bin/env python

import argparse, hashlib, os, sys # do not use any other imports/libraries
from pyasn1.codec.der import decoder

# took x.y hours (please specify here how much time your solution required)


# parse arguments
parser = argparse.ArgumentParser(description='generate self-signed X.509 CA certificate', add_help=False)
parser.add_argument("private_key_file", help="Private key file (in PEM or DER form)")
parser.add_argument("output_cert_file", help="File to store self-signed CA certificate (PEM form)")
args = parser.parse_args()


def int_to_bytestring(i, length):
    # converts integer to bytestring
    s = ""
    for smth in xrange(length):
        s = chr(i & 0xff) + s
        i >>= 8
    return s

def bytestring_to_int(s):
    # converts bytestring to integer
    i = 0
    for char in s:
        i <<= 8
        i |= ord(char)
    return i

def pem_to_der(content):
    # converts PEM content (if it is PEM) to DER

def get_pubkey(filename):
    # reads private key file and returns (n, e)
    return int(privkey[0][1]), int(privkey[0][2])

def get_privkey(filename):
    # reads private key file and returns (n, d)
    return int(privkey[0][1]), int(privkey[0][3])

def pkcsv15pad_sign(plaintext, n):
    # pad plaintext for signing according to PKCS#1 v1.5

    # calculate byte size of modulus n

    # plaintext must be at least 3 bytes smaller than modulus

    # generate padding bytes

def pkcsv15pad_remove(plaintext):
    # removes PKCS#1 v1.5 padding
    return plaintext


def digestinfo_der(m):
    # returns ASN.1 DER encoded DigestInfo structure containing SHA256 digest of m
    return der

def sign(m, keyfile):
    # sign DigestInfo of message m
    return c

def selfsigned(privkey, certfile):
    # create x509v3 self-signed CA root certificate


    # get public key (n, e) from private key file
    n, e = get_pubkey(privkey)

    # construct subjectPublicKeyInfo from public key values (n, e)


    # construct tbsCertificate structure

    # sign tbsCertificate structure

    # construct final X.509 DER

    # convert to PEM by .encode('base64') and adding PEM headers

    # write PEM certificate to file
    open(certfile, 'w').write(pem)

selfsigned(args.private_key_file, args.output_cert_file)
